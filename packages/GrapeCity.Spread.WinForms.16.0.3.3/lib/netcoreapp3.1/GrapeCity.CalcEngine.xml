<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>GrapeCity.CalcEngine</name>
  </assembly>
  <members>
    <member name="T:GrapeCity.CalcEngine.IAsyncFunctionManager">
      <summary>
            Represents an asynchronous function manager which handles processing after asynchronous function(s) finished.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IAsyncFunctionManager.OnDataChanged(GrapeCity.CalcEngine.AsyncApplication)">
      <summary>
            Called when asynchronous function(s) finished.
            </summary>
      <param name="asyncApplication">An <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> object indicates the asynchronous function application.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.AsyncApplication">
      <summary>
            Represents the unique asynchronous application which serve data base on real-time data (topic parameter(s)).
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> class.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.AsyncApplication.Topics">
      <summary>
            Gets the topics.
            </summary>
      <value>The topics.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopicKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>
            Creates the unique topic key which will be used to classify among asynchronous calls.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>A <see cref="T:System.String" /> value represents the unique topic key.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopic(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>
            Creates the asynchronous topic.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncTopic" /> object indicates the asynchronous topic.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.GetData">
      <summary>
            Gets last received data of all topics in the asynchronous application.
            </summary>
      <returns>A dictionary maps topic's ID to the received data. </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Finalize">
      <summary>
            Finalizes an instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> class.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.AsyncApplication.IsServerStarted">
      <summary>
            Gets or sets a value indicating whether this instance is server started.
            </summary>
      <value>
        <c>true</c> if this instance is server started; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.ConnectData(GrapeCity.CalcEngine.AsyncTopic)">
      <summary>
            Connects the data.
            </summary>
      <param name="topic">The asynchronous topic.</param>
      <returns>
        <c>true</c> if connecting data is successfully, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Start">
      <summary>
            Starts the asynchronous application.
            </summary>
      <returns>
        <c>true</c> if the asynchronous application starts successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Stop">
      <summary>
            Stops the asynchronous application.
            </summary>
    </member>
    <member name="E:GrapeCity.CalcEngine.AsyncApplication.DataChanged">
      <summary>
            Occurs when the data, which received from asynchronous application, is changed.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.AddChangedTopic(System.Int32,System.String)">
      <summary>
            Adds the specified topic to the changed list.
            </summary>
      <param name="topicId">An integer value indicates the topic ID.</param>
      <param name="topicKey">A string value indicates the topic key.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.OnDataChanged">
      <summary>
            Called when the data, which received from asynchronous application, is changed.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.AsyncTopic">
      <summary>
            Represents an asynchronous topic.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.BuiltInFunctions.FILTERXMLFunctionExpression.GetXmlNamespaceManager(System.Xml.XPath.XPathNavigator)" -->
    <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.EncodeType">
      <summary>
            Indicates how an entry is encoded in the formula.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.BuiltInFunctions.EncodeType.Field">
      <summary>
            The entry appears as it is (like "TheName").
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.BuiltInFunctions.EncodeType.EncodeField">
      <summary>
            The entry appears with a square brackets (like "[The Name]").
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.BuiltInFunctions.EncodeType.HalfEncodeField">
      <summary>
            The entry appears with a sing square bracket at the beginning (like "[The Name").
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IDelegate">
      <summary>
            Represents a function delegate which is returned by LAMBDA function.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IDelegate.ParameterCount">
      <summary>
            Gets an integer value indicates the total number of parameters that the delegate accepts.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IDelegate.Item(System.Int32)">
      <summary>
            Gets the parameter at the specified position.
            </summary>
      <param name="index">The position of the parameter.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IParameter" /> object represents the parameter.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IParameter">
      <summary>
            Represents a parameter of LAMBDA function.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IParameter.Name">
      <summary>
            Gets the declared name of the parameter.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IParameter.Optional">
      <summary>
            Gets a boolean value indicates whether the parameter can be omitted.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IParameter.Value">
      <summary>
            Creates an <see cref="T:GrapeCity.CalcEngine.IValue" /> object that can be passed as argument of this parameter.
            </summary>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IValue" /> object that can be passed as argument of this parameter</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.CalcError">
      <summary>
            Represents a calculation error.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.None">
      <summary>
            There is no error. This value is used internally and it is not supposed to be used directly in your code.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Null">
      <summary>
            #NULL!
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.DivideByZero">
      <summary>
            #DIV/0!
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Value">
      <summary>
            #VALUE!
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Reference">
      <summary>
            #REF!
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Name">
      <summary>
            A Name error will show as #NAME?. The error indicates that a formula contained unrecognized text.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Number">
      <summary>
            #NUM!
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.NotAvailable">
      <summary>
            #N/A
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.GettingData">
      <summary>
            #GETTING_DATA
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Spill">
      <summary>
            A Spill error will show as #SPILL!. The error indicates that a formula result cannot be shown due to non-empty adjacent cells.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Connect">
      <summary>
            A Connect error will show as #CONNECT!. The error indicates that an attempt to connect to the service has failed.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Blocked">
      <summary>
            A Blocked error will show as #BLOCKED!. The error indicates that the connection to the service was blocked.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Unknown">
      <summary>
            An Unknown error will show as #UNKNOWN!. The error indicates a rich value with an unknown rich value type.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Field">
      <summary>
            A Field error will show as #FIELD!. The error indicates that a rich value key was not found.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Calc">
      <summary>
            A Calc error will show as #CALC!. The error indicates a scenario currently unsupported by the calculation engine.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Busy">
      <summary>
            A Busy error will show as #BUSY!. The error indicates that we are waiting on data from the service.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.External">
      <summary>
            #EXTERNAL!
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.CellReference">
      <summary>
            Represents a contextual cell reference.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellReference.Empty">
      <summary>
            Empty CellReference instance.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> struct which represents an absolute cell reference.
            </summary>
      <param name="row">An integer indicates the index of the row.</param>
      <param name="column">An integer indicates the index of the column.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> struct.
            </summary>
      <param name="row">An integer indicates the index of the row.</param>
      <param name="column">An integer indicates the index of the column.</param>
      <param name="relation">A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation" /> value indicates the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Relation">
      <summary>
            Gets the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.
            </summary>
      <value>A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation" /> value represents the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Column">
      <summary>
            Gets the index of the column.
            </summary>
      <value>An integer represents the index of the column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Row">
      <summary>
            Gets the index of the row.
            </summary>
      <value>An integer represents the index of the row.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.op_Equality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>
            Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference" /> are equals.
            </summary>
      <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <returns>
        <c>true</c> if two values are equals; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.op_Inequality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>
            Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference" /> are not equals.
            </summary>
      <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <returns>
        <c>true</c> if two values are not equals; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.Equals(GrapeCity.CalcEngine.CellReference)">
      <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> is equal to another <see cref="T:GrapeCity.CalcEngine.CellReference" /> of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.CellReference" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.CompareTo(GrapeCity.CalcEngine.CellReference)">
      <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> with another <see cref="T:GrapeCity.CalcEngine.CellReference" />.
            </summary>
      <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> to compare with this <see cref="T:GrapeCity.CalcEngine.CellReference" />.</param>
      <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> values being compared.
            The return value has the following meanings:
            Less than zero: This object is less than the other parameter.
            Zero: This object is equal to other.
            Greater than zero: This object is greater than other.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.ToAbsolute(System.Int32,System.Int32)">
      <summary>
            Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            </summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.ToRelative(System.Int32,System.Int32)">
      <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            Position state of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> is unchanged.
            </summary>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> indicates the target location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.ToContext(System.Int32,System.Int32)">
      <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            Position state of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> is unchanged.
            </summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.SwitchReferenceType">
      <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference" />.
            </summary>
      <returns>The new reference type.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.SwitchReferenceType(GrapeCity.CalcEngine.CellRelation)">
      <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> to the specified.
            </summary>
      <param name="newReferenceType">The new reference type.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.CellValue">
      <summary>
            Specifies a cell value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValue.Invalid">
      <summary>
            Represents an invalid cell value.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.GetNumber(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets numeric value from the <see cref="T:GrapeCity.CalcEngine.CellValue" /> object.
            </summary>
      <param name="context">The evaluation context.</param>
      <returns>The numeric value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.GetLogical(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets numeric value from the <see cref="T:GrapeCity.CalcEngine.CellValue" /> object.
            </summary>
      <param name="context">The evaluation context.</param>
      <returns>The numeric value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.Equals(GrapeCity.CalcEngine.CellValue)">
      <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellValue" /> value is equal to another <see cref="T:GrapeCity.CalcEngine.CellValue" /> value.
            </summary>
      <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellValue" /> value to compare with this <see cref="T:GrapeCity.CalcEngine.CellValue" /> value.</param>
      <returns>
        <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.IsValid">
      <summary>
            Determines whether this cell value is valid.
            </summary>
      <returns>
        <c>true</c> if this cell value is valid; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Number">
      <summary>
            Gets the <see cref="T:System.Double" /> value.
            </summary>
      <value>A <see cref="T:System.Double" /> value represents the numeric value.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.GetText(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets <see cref="T:System.String" /> value from the <see cref="T:GrapeCity.CalcEngine.CellValue" /> value.
            </summary>
      <param name="context">The evaluation context.</param>
      <returns>A <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Logical">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
      <value>A <see cref="T:System.Boolean" /> value represents the boolean value.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Error">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.
            </summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.CalcError" /> value represents the error.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.DateTime">
      <summary>
            Gets the <see cref="P:GrapeCity.CalcEngine.CellValue.DateTime" /> value.
            </summary>
      <value>A <see cref="P:GrapeCity.CalcEngine.CellValue.DateTime" /> value represents the date.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.TimeSpan">
      <summary>
            Gets the <see cref="P:GrapeCity.CalcEngine.CellValue.TimeSpan" /> value.
            </summary>
      <value>A <see cref="P:GrapeCity.CalcEngine.CellValue.TimeSpan" /> value represents the time span.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Text">
      <summary>
            Gets the <see cref="T:System.String" /> value.
            </summary>
      <value>A <see cref="T:System.String" /> value represents the text.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Object">
      <summary>
            Gets the <see cref="T:System.Object" /> value.
            </summary>
      <value>An <see cref="T:System.Object" /> value represents the value.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Type">
      <summary>
            Gets a <see cref="T:GrapeCity.CalcEngine.CellValueType" /> value that indicates the value type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellValue.Type2">
      <summary>
            Gets a <see cref="T:GrapeCity.CalcEngine.ValueType" /> value that indicates the value type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.Reset">
      <summary>
            Resets this cell value to <c>null</c>.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.Box">
      <summary>
            Returned the boxed value of this cell value.
            </summary>
      <returns>An <see cref="T:System.Object" /> instance represents the boxed value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.Object)">
      <summary>
            Sets the <see cref="T:System.Object" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to set.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SpilledValueType">
      <summary>
            Specifies the type of a cell value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.Number">
      <summary>
            Specifies a double precision floating point number.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.Logical">
      <summary>
            Specifies a logical (boolean) value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.Error">
      <summary>
            Specifies a <see cref="T:GrapeCity.CalcEngine.CalcError" />. 
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.Text">
      <summary>
             Specifies text.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.DateTime">
      <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.SpilledValueType.DateTime" /> value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.TimeSpan">
      <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.SpilledValueType.TimeSpan" /> value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.SpilledValueType.Empty">
      <summary>
            Specifies an empty (<c>null</c>) value.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.CellValueType">
      <summary>
            Specifies the type of a cell value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Number">
      <summary>
            Specifies a double precision floating point number.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Logical">
      <summary>
            Specifies a logical (boolean) value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Error">
      <summary>
            Specifies a <see cref="T:GrapeCity.CalcEngine.CalcError" />. 
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Text">
      <summary>
             Specifies text.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.DateTime">
      <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.CellValueType.DateTime" /> value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.TimeSpan">
      <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.CellValueType.TimeSpan" /> value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Empty">
      <summary>
            Specifies an empty (<c>null</c>) value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Object">
      <summary>
            Specifies a general object.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellValueType.Image">
      <summary>
            Specifies the cell inline image.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Wildcard.IsMatch(GrapeCity.CalcEngine.WildcardToken[],System.String,System.Boolean,System.Int32,System.StringComparison)">
      <summary>
              Matches the wilcard string with tokens. It uses non-recursive algorithm to got best performance which it's possible
              in my ability :(
            </summary>
      <param name="tokens">The tokens.</param>
      <param name="str">The STR.</param>
      <returns></returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Wildcard.ParseTokens(System.String,System.Boolean)">
      <summary>
            Parses the wildcard tokens.
            </summary>
      <param name="pattern">A string value indicates the wilcard pattern.</param>
      <param name="startsWithTokens">if set to <c>true</c>, the pattern intend to be used for "starts with" comparasion.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> array represents the wilcard tokens.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.WildcardToken">
      <summary></summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.WildcardToken.#ctor(System.Int32)">
      <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> struct.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.WildcardToken.#ctor(System.Char)">
      <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> struct.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.ICloneable`1">
      <summary>
            Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:GrapeCity.CalcEngine.ICloneable`1.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>A new object that is a copy of the current instance.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.RangeCache">
      <summary>
            Represents a class which provides caching for common range operations.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeCache.FindEquals(GrapeCity.CalcEngine.IReadonlyPrimitiveValue,System.Boolean,GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Finds the cell which is matched with the specified <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> value.
            </summary>
      <param name="find">The value to compare.</param>
      <param name="xlookupCompatible">
        <c>true</c> if matching is compatible with XLOOKUP/XMATCH function; otherwise, <c>false</c>.</param>
      <param name="context">The evaluation context.</param>
      <returns></returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeCache.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeCache.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeCache.Equals(GrapeCity.CalcEngine.RangeCache)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.RangeReference">
      <summary>
            Represents a contextual range reference.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.TopLeft">
      <summary>
            Gets the top-left cell reference.
            </summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value represents the top-left cell reference.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.BottomRight">
      <summary>
            Gets the bottom-right cell reference.
            </summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value represents the bottom-right cell reference.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Column">
      <summary>
            Gets the index of the left column.
            </summary>
      <value>An integer represents the index of the left column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Row">
      <summary>
            Gets the index of the top row.
            </summary>
      <value>An integer represents the index of the top row.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Column2">
      <summary>
            Gets the index of the right column.
            </summary>
      <value>An integer represents the index of the right column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Row2">
      <summary>
            Gets the index of the bottom row.
            </summary>
      <value>An integer represents the index of the bottom row.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.IsWholeRow">
      <summary>
            Gets a value indicating whether this instance is whole row.
            </summary>
      <value>
        <c>true</c> if this instance is whole row; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.IsWholeColumn">
      <summary>
            Gets a value indicating whether this instance is whole column.
            </summary>
      <value>
        <c>true</c> if this instance is whole column; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsOneCell">
      <summary>
            Gets a value indicating whether this reference is one cell.
            </summary>
      <value>
        <c>true</c> if this reference is one cell; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Offset(System.Int32,System.Int32)">
      <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> by the specified amount.
            </summary>
      <param name="translateRows">The amount to offset the y-coordinate.</param>
      <param name="translateColumns">&gt;The amount to offset the x-coordinate.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute(System.Int32,System.Int32)">
      <summary>
            Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            </summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToRelative(System.Int32,System.Int32)">
      <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            Position state of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is unchanged.
            </summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToContextWithoutReorder(System.Int32,System.Int32)">
      <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> object which relates with the context cell
            (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.
            Position state of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is unchanged.
            </summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute">
      <summary>
            Removes relate reference flag(s) to get the absolute reference.
            </summary>
      <returns>A <see cref="!:RangeReference." /> value represents the absolute reference of this reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(GrapeCity.CalcEngine.RangeReference)">
      <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is equal to another <see cref="T:GrapeCity.CalcEngine.RangeReference" /> of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.RangeReference" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.CompareTo(GrapeCity.CalcEngine.RangeReference)">
      <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> with another <see cref="T:GrapeCity.CalcEngine.RangeReference" />.
            </summary>
      <param name="other">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> to compare with this <see cref="T:GrapeCity.CalcEngine.RangeReference" />.</param>
      <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> values being compared.
            The return value has the following meanings:
            Less than zero: This object is less than the other parameter.
            Zero: This object is equal to other.
            Greater than zero: This object is greater than other.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsEmpty">
      <summary>
            Determines whether this instance is empty.
            </summary>
      <returns>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.
            </summary>
      <param name="row">An integer value indicates the row index.</param>
      <param name="column">An integer value indicates the column index.</param>
      <param name="position">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the reference is relative and/or absolute.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.
            </summary>
      <param name="row">An integer value indicates the absolute top row index.</param>
      <param name="column">An integer value indicates the absolute left column index.</param>
      <param name="row2">An integer value indicates the absolute bottom row index.</param>
      <param name="column2">An integer value indicates the absolute right column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation,System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.
            </summary>
      <param name="row">An integer value indicates the top row index.</param>
      <param name="column">An integer value indicates the left column index.</param>
      <param name="topLeftPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the top-left reference is relative and/or absolute.</param>
      <param name="row2">An integer value indicates the bottom row index.</param>
      <param name="column2">An integer value indicates the right column index.</param>
      <param name="bottomRightPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the bottom-right reference is relative and/or absolute.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.
            </summary>
      <param name="topLeft">The top left reference.</param>
      <param name="bottomRight">The bottom right reference.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IntersectWith(GrapeCity.CalcEngine.RangeReference@)">
      <summary>
            Intersects this <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range with the specified <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range.
            </summary>
      <param name="range">The <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range to intersect with.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range represents the intersected <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range.</returns>
      <remarks>
            Make sure that all rows and columns are all absolute or relative.
            </remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(GrapeCity.CalcEngine.RangeReference@)">
      <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
      <param name="rangeReference">The range reference.</param>
      <returns>
        <c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
      <param name="row">An integer value indicates the top row index of cell range.</param>
      <param name="column">An integer value indicates the left column index of cell range.</param>
      <param name="row2">An integer value indicates the bottom row index of cell range.</param>
      <param name="column2">An integer value indicates the right column index of cell range.</param>
      <returns>
        <c>true</c> if the specified row is intersected; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ReorderAbsolute">
      <summary>
            Reorders an aboslute range reference.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.SwitchReferenceType">
      <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference" />.
            </summary>
      <returns>The new reference type.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.SwitchReferenceType(GrapeCity.CalcEngine.CellRelation)">
      <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> to the specified.
            </summary>
      <param name="newReferenceType">The new reference type.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SparseArray`1">
      <summary>
            Represents a strongly typed arry of objects that can be accessed by index.
            Provides methods to manipulate objects.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the SparseArray class that is empty and has the specified initial length.
            </summary>
      <param name="length">The number of elements that the new SparseArray can store.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.SparseArray`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Clear(System.Int32,System.Int32)">
      <summary>
            Removes all elements from the SparseArray at the specified range.
            </summary>
      <param name="index">The zero-based index of the range.</param>
      <param name="length">The length of the range.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Clear">
      <summary>
            Removes all items from the <see cref="!:SparseArray" />.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Clone(System.Boolean)">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.SparseArray`1.Length">
      <summary>
            Gets a 32-bit integer that represents the total number of elements in SparseArray.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SparseArray`1.DataLength">
      <summary>
            Returns the length of the non-null data currently in the <see cref="T:GrapeCity.CalcEngine.SparseArray`1" />.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of items from the SparseArray.
            </summary>
      <param name="index">
            Specifies the index of the first item to remove, and must be greater than
            or equal to 0 and less than Length, or an IndexOutOfRangeException is thrown.
            </param>
      <param name="count">
            Specifies the number of null items to remove, and must be greater than 0 and
            less than Length - index, or an ArgumentOutOfRangeException is thrown.
            </param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.InsertRange(System.Int32,System.Int32)">
      <summary>
            Inserts the specified number of new null items into the SparseArray at the specified index.
            </summary>
      <param name="index">
            Specifies the insertion point, and must be greater than or equal to 0
            and less than or equal to Length, or an IndexOutOfRangeException is thrown.
            </param>
      <param name="count">
            Specifies the number of null items to insert, and must be greater than 0,
            or an ArgumentOutOfRangeException is thrown.
            </param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the SparseArray.
            </summary>
      <param name="item">The object to locate in the SparseArray.</param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Fill(System.Int32,System.Int32,`0)">
      <summary>
            Fills a range of array with a specified value.
            </summary>
      <param name="index">The start index of range.</param>
      <param name="length">The length of range.</param>
      <param name="value">The value to fill.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Copy(GrapeCity.CalcEngine.SparseArray{`0},System.Int32,GrapeCity.CalcEngine.SparseArray{`0},System.Int32,System.Int32)">
      <summary>
            Copies a range of elements from an SparseArray starting at the specified source index and
            pastes them to another SparseArray starting at the specified target index.
            The length and the indexes are specified as 32-bit integers.
            </summary>
      <param name="source">The SparseArray that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the source at which copying begins.</param>
      <param name="target">The SparseArray that receives the data.</param>
      <param name="targetIndex">A 32-bit integer that represents the index in the target at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Move(GrapeCity.CalcEngine.SparseArray{`0},System.Int32,GrapeCity.CalcEngine.SparseArray{`0},System.Int32,System.Int32)">
      <summary>
            Moves a range of elements from an SparseArray starting at the specified source index and
            pastes them to another SparseArray starting at the specified target index.
            Elements of old range will be clear.
            The length and the indexes are specified as 32-bit integers.
            </summary>
      <param name="source">The SparseArray that contains the data to move.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the source at which moving begins.</param>
      <param name="target">The SparseArray that receives the data.</param>
      <param name="targetIndex">A 32-bit integer that represents the index in the target at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to move.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Swap(GrapeCity.CalcEngine.SparseArray{`0},System.Int32,GrapeCity.CalcEngine.SparseArray{`0},System.Int32,System.Int32)">
      <summary>
            Swaps a range of elements from an SparseArray starting at the specified source index with
            another SparseArray starting at the specified target index.
            The length and the indexes are specified as 32-bit integers.
            </summary>
      <param name="source">The SparseArray that contains the data to swap.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the source at which swapping begins.</param>
      <param name="target">The SparseArray that receives the data.</param>
      <param name="targetIndex">A 32-bit integer that represents the index in the target at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to swap.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Contains(`0)">
      <summary>
            Determines whether the SparseArray contains a specific value.
            </summary>
      <param name="item">The object to locate in the SparseArray.</param>
      <returns>
        <c>true</c> if item is found in the; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies all the elements of the current one-dimensional System.Array to the specified
            one-dimensional SparseArray starting at the specified destination SparseArray
            index. The index is specified as a 32-bit integer.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the current SparseArray.</param>
      <param name="arrayIndex">A 32-bit integer that represents the index in array at which copying begins.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
            Copies all the elements of the current one-dimensional System.Array to the specified
            one-dimensional SparseArray starting at the specified destination SparseArray
            index. The index is specified as a 32-bit integer.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the current SparseArray.</param>
      <param name="arrayIndex">A 32-bit integer that represents the index in array at which copying begins.</param>
      <param name="length">The number of elements will be copied.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies all the elements of the current one-dimensional System.Array to the specified
            one-dimensional SparseArray starting at the specified destination SparseArray
            index. The index is specified as a 32-bit integer.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the current SparseArray.</param>
      <param name="arrayIndex">A 32-bit integer that represents the index in array at which copying begins.</param>
      <param name="length">The number of elements will be copied.</param>
      <param name="startCopyingIndex">A 32-bit integer value indicatese the start index of which copying begins.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.NextNonEmptyIndex(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.NextNonEmptyIndex(System.Int32,`0@)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.NextNonEmptyQuickAccessKey(System.Int32,`0@)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.NextNonEmptyQuickAccessKey(System.Int32,`0@,System.Int32@)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.PreviousNonEmptyIndex(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.PreviousNonEmptyIndex(System.Int32,`0@)" -->
    <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.SparseArray`1.PreviousNonEmptyQuickAccessKey(System.Int32,`0@,System.Int32@)" -->
    <member name="M:GrapeCity.CalcEngine.SparseArray`1.Equals(GrapeCity.CalcEngine.SparseArray{`0})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.AggregateFunction">
      <summary>
            Represents all supported aggregate functions.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IValuesArray">
      <summary>
            Represents a 2-dimensions array of values.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.RowCount">
      <summary>
            Gets the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
      <value>An integer value represents the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.ColumnCount">
      <summary>
            Gets the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
      <value>An integer value represents the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.Item(System.Int32,System.Int32)">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> at the specified row and column.
            </summary>
      <param name="row">An integer value indicates the row index.</param>
      <param name="column">An integer value indicates the column index.</param>
      <returns>IPrimitiveValue.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.Transpose">
      <summary>
            Transposes the rows and columns of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.Resize(System.Int32,System.Int32)">
      <summary>
            Resizes this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> to specified row count and column count.
            </summary>
      <param name="rowCount">The total number of rows.</param>
      <param name="columnCount">The total number of columns.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.SetValue(System.Object)">
      <summary>
            Sets values to this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> object.
            </summary>
      <param name="values">The object that contains one or many values.</param>
      <returns>
        <c>true</c> if values are set, <c>false</c> otherwise.</returns>
      <remarks>
            If <paramref name="values" /> is an array, its elements will be set to the corresponding element of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> object. Otherwise, the same value will be set to all elements.
            </remarks>
    </member>
    <member name="T:GrapeCity.CalcEngine.CacheOptions">
      <summary>
            Defines the details of how caching is processed.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CacheOptions.On">
      <summary>
            The caching should be used. Cached data will have short life in memory. This is default option.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CacheOptions.Aggressive">
      <summary>
            Caching should be used as much as possible. Cached data will have a long life in memory.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CacheOptions.None">
      <summary>
            No caching used.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.AsyncFunction">
      <summary>
            Represents an asynchronous function which result can be returned later without locking the calculating thread.
            </summary>
      <seealso cref="T:GrapeCity.CalcEngine.Function" />
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.#ctor(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.FunctionAttributes)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunction" /> class.
            </summary>
      <param name="functionName">Name of the function.</param>
      <param name="minArgs">An integer value indicates the minimum amount of arguments.</param>
      <param name="maxArgs">An integer value indicates the maximum amount of arguments.</param>
      <param name="attributes">A <see cref="T:GrapeCity.CalcEngine.FunctionAttributes" /> value indicates attributes of the function.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplicationKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>
            Creates the unique application key which will be used to classify among asynchronous functions.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>A <see cref="T:System.String" /> value represents the unique application key.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplication(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>
            Creates the asynchronous application.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> object indicates the asynchronous application.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.Expression">
      <summary>
            Represents a base class for an expression.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsReference">
      <summary>
            Gets a value indicating whether the expression contains reference.
            </summary>
      <value>
        <c>true</c> if the expression contains reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsMixedReference">
      <summary>
            Gets a value indicating whether the expression contains both of relative reference and absolute reference.
            </summary>
      <value>
        <c>true</c> if the expression contains both of relative reference and absolute reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsRelativeReference">
      <summary>
            Gets a value indicating whether the expression contains relative reference.
            </summary>
      <value>
        <c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsAbsoluteReference">
      <summary>
            Gets a value indicating whether the expression contains relative reference.
            </summary>
      <value>
        <c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsHyperlink">
      <summary>
            Determines whether this expression contains hyper-link function.
            </summary>
      <returns>
        <c>true</c> if this instance contains hyper-link function; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.Expression.ExpressionCount">
      <summary>
            Gets the total count of child expression(s).
            </summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.GetExpression(System.Int32)">
      <summary>
            Gets the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>
            Replaces the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
      <param name="engine">The formula engine.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
      <param name="other">An <see cref="T:GrapeCity.CalcEngine.Expression" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
      <summary>
            Clones (shallow clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the shallow cloned expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.IsImplicitIntersectionOperatorAdded">
      <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            Use when export to determine any children of current expression need to be added @.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Expression.NodeCount">
      <summary>
            Gets the total count of child expression(s).
            </summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.GetNode(System.Int32)">
      <summary>
            Gets the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.FunctionAttributes">
      <summary>
            Represents evaluation atrributes of the custom function.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.SingleCell">
      <summary>
            Indicates whether the function process array formula as single-cell formulas.
            Some functions like SUM, COUNT... will process array formula as single-cell formulas.
            Others will process array formula as multi-cell formulas.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Volatile">
      <summary>
            The function is volatile.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Constant">
      <summary>
            The function represents a constant value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Async">
      <summary>
            The function contains asynchronous function
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Visual">
      <summary>
            The data visualization function visualize cell value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Spillable">
      <summary>
            The function is able to return array.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Boolean">
      <summary>
            Indicates that the function will return boolean result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Number">
      <summary>
            Indicates that the function will return numeric result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Date">
      <summary>
            Indicates that the function will return date result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Time">
      <summary>
            Indicates that the function will return timespan result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Text">
      <summary>
            Indicates that the function will return string result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Error">
      <summary>
            Indicates that the function will return CalcError result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Reference">
      <summary>
            Indicates that the function will return reference result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Array">
      <summary>
            Indicates that the function will return array result.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Variant">
      <summary>
            Indicates that the function will return variant result.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IStructuredObject">
      <summary>
            Represents a structured object which stores data as a spreadsheet.
            </summary>
      <seealso cref="!:System.IEquatable&lt;GrapeCity.CalcEngine.IStructuredObject&gt;" />
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.IsUndefined">
      <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object is undefined.
            </summary>
      <returns>
        <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object is undefined; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.Name">
      <summary>
            Gets the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.
            </summary>
      <value>A string value represents the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnId(System.String)">
      <summary>
            Gets the relative column index of the specified column.
            </summary>
      <param name="columnName">A string value indicates the specified column.</param>
      <returns>An integer value indicates the relative column index.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnName(System.Int32)">
      <summary>
            Gets the table column name of the specified column.
            </summary>
      <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
      <returns>A string indicates the column name.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.SetColumnName(System.Int32,System.String)">
      <summary>
            Gets the table column name of the specified column.
            </summary>
      <param name="index">An integer value indicates the table column index.</param>
      <param name="columnName">A string value indicates the specified column.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnIndex(System.Int32)">
      <summary>
            Get the table column index of the specified column.
            </summary>
      <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
      <returns>An <see cref="T:System.Int32" /> value represents the table column index of the specified column.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.Range">
      <summary>
            Gets the range reference of the structured object.
            </summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the range of structured object.</value>
      <remarks>The <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value must be absolute reference.</remarks>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.HeaderRowCount">
      <summary>
            Gets the header row count.
            </summary>
      <value>An integer values represents the header row count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.TotalsRowCount">
      <summary>
            Gets the totals row count.
            </summary>
      <value>An integer value represents the totals row count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.ReferenceSource">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.
            </summary>
      <value>The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetReplacedStructuredObj">
      <summary>
            Get the replacement of this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> in case it is removed.
            </summary>
      <returns>The replacement of this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.StructuredItemSpecifiers">
      <summary>
            Represents item specifiers of the structured object.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Default">
      <summary>
            Default item specifier. It has same effect with Data.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.All">
      <summary>
            The entire table, including column headers, data, and totals (if any).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Data">
      <summary>
            Just the data rows.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Headers">
      <summary>
            Just the header row.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Totals">
      <summary>
            Just the total row. If none exists, then it returns null.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.ThisRow">
      <summary>
            Just the cells in the same row as the formula.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.RowHeaders">
      <summary>
            The row headers
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Forecast.IEtsModel.Count">
      <summary>
            Gets an integer value represents the total number of items in the model.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Forecast.IEtsModel.Timelines">
      <summary>
            Gets the refined timeline data.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Forecast.IEtsModel.Values">
      <summary>
            Gets the refined values. 
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Forecast.IEtsModel.GetTimeline(System.Int32)">
      <summary>
            Get timeline corresponding to index from EtsModel
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Forecast.IEtsModel.GetTimelineIndex(System.Double)">
      <summary>
            Get corresponding index about timeline in EtsModel
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.Function">
      <summary>
            Represents a function in the calculation engine.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.#ctor(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.FunctionAttributes)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Function" /> class.
            </summary>
      <param name="functionName">A string value represents the function name.</param>
      <param name="minArgs">An integer values indicates the minimum argument count.</param>
      <param name="maxArgs">An integer values indicates the maximum argument count.</param>
      <param name="attributes">A <see cref="T:GrapeCity.CalcEngine.FunctionAttributes" /> value indicates attributes of the function.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.Settings">
      <summary>
            Gets or sets the settings of function.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.Hidden">
      <summary>
            Gets a boolean value indicating whether the function is hidden.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.CalculateFormulaArrayDimensions(GrapeCity.CalcEngine.IArguments,System.Int32@,System.Int32@)">
      <summary>
            Update the dimensions of target dynamic evaluated array.
            </summary>
      <param name="arguments">The arguments of the function.</param>
      <param name="rowCount">The row count of the returned array.</param>
      <param name="columnCount">The column count of the returned array.</param>
      <returns>
        <c>true</c> if the dimensions are determined by this function; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetFormulaArrayDimensions(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IValue,System.Int32@,System.Int32@)">
      <summary>
            Calculates the dimensions of the specified argument.
            </summary>
      <param name="context">The evaluation context.</param>
      <param name="value">The argument of the function.</param>
      <param name="rowCount">The row count of the returned array.</param>
      <param name="columnCount">The column count of the returned array.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.Name">
      <summary>
            Gets the function name.
            </summary>
      <value>A <see cref="T:System.String" /> value indictes the function name.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.MinArgs">
      <summary>
            Gets the minimum argument count of the function.
            </summary>
      <value>An integer value inciates the minimum argument count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.MaxArgs">
      <summary>
            Gets the maximum argument count of the function.
            </summary>
      <value>An integer value inciates the maximum argument count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.IsAttached">
      <summary>
            Gets a value indicating whether this function is attached to the workbookset.
            </summary>
      <value>
        <c>true</c> if this function is attached to the workbookset; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Clone">
      <summary>
            Clones this function.
            </summary>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function" /> object represents the cloned function.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Evaluate(GrapeCity.CalcEngine.IArguments,GrapeCity.CalcEngine.IValue)">
      <summary>
            Evaluates the function based on specified arguments and set evaluated value to <paramref name="result" />.
            </summary>
      <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.IArguments" /> object indicates set of arguments.</param>
      <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to set result value.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.StartEvaluatingFormulaArray(GrapeCity.CalcEngine.IArguments)">
      <summary>
            Starts evaluating multiple cells as formula array.
            </summary>
      <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.Arguments" /> object indicates set of arguments.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.FinishEvaluatingFormularray(GrapeCity.CalcEngine.IArguments)">
      <summary>
            Finishs evaluating multiple cells as formula array.
            </summary>
      <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.Arguments" /> object indicates set of arguments.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Equals(GrapeCity.CalcEngine.Function)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.IsArrayParameter(System.Int32)">
      <summary>
            Determines whether the expression at specified index is evaluated as an array parameter.
            </summary>
      <param name="argIndex">An integer value indicates the index of the argument.</param>
      <returns>
        <c>true</c> the function evaluates the specified parameter as an array; otherwise, the function evaluates each cells of the range separately.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.IsArrayParameter(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IValue,System.Int32)">
      <summary>
            Determines whether the expression at specified index is evaluated as an array parameter.
            </summary>
      <param name="context">Current evaluation context.</param>
      <param name="expression">Expression at the index of the argument.</param>
      <param name="evaluatedValue">Evaluated value at the index of the argument.</param>
      <param name="argIndex">An integer value indicates the index of the argument.</param>
      <returns></returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.IsExplicitPrecedent(System.Int32)">
      <summary>
            Determines whether the evaluated result depends on all values from the argument.
            </summary>
      <param name="argIndex">An integer value indicates the index of the argument.</param>
      <returns>
        <c>true</c> if the evaluated result depends on all values from the argument; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetVisibilityDependent(System.Int32,System.Int32)">
      <summary>
            Determines whether the visibility change affects to the calculation.
            </summary>
      <param name="argIndex">An integer value indicates the index of the argument.</param>
      <param name="argumentCount">An integer value indicates the total number of arguments.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function.VisibilityDependent" /> value represents how the visibility change affects to the calculation.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetArgumentType(System.Int32,System.Int32)">
      <summary>
            Determines whether the expression at specified index is an input name.
            </summary>
      <param name="argIndex">The argument position.</param>
      <param name="argCount">The total number of arguments.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.Function.VisibilityDependent">
      <summary>
            Represents how the visiblity change affects to the calculation.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Function.VisibilityDependent.None">
      <summary>
            The visibility change does not affect to the calculation.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Function.VisibilityDependent.Rows">
      <summary>
            The row visibility change affects to the calculation.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Function.VisibilityDependent.Columns">
      <summary>
            The column visibility change affects to the calculation.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Function.VisibilityDependent.Both">
      <summary>
            Both of row and column visibility change affects to the calculation.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.CanReturnDelegate">
      <summary>
            Gets or sets a boolean value indicating whether the function can return an <see cref="T:GrapeCity.CalcEngine.IDelegate" /> object as result.
            </summary>
      <returns>
        <c>true</c> if the function can return an <see cref="T:GrapeCity.CalcEngine.IDelegate" /> object as result; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetMinimumArgumentCount(System.Int32)">
      <summary>
            Gets the minimum number of arguments must be passed to the function.
            </summary>
      <param name="function">The function to extract information.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetFunctionName(GrapeCity.CalcEngine.ICalcEngineLanguagePackage)">
      <summary>
            Gets the localized name of the function.
            </summary>
      <param name="languagePackage">An <see cref="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage" /> object indicates the language package.</param>
      <returns>A string value represents the localized name of the function.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.Category">
      <summary>
            Gets the function category.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.ArgumentType">
      <summary>
            Represents the type of an argument.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ArgumentType.Value">
      <summary>
            Represents the value argument.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ArgumentType.Variable">
      <summary>
            Represents the variable argument.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ArgumentType.VariableCalculation">
      <summary>
            Represetns the calculation of a variable argument.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ArgumentType.Calculation">
      <summary>
            Represents the calculation of a function.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.FunctionSettings">
      <summary>
            Represents settings of the function.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionSettings.AnyArguments">
      <summary>
            The total number of arguments can be any
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionSettings.OddArguments">
      <summary>
            The total number of arguments is odd
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionSettings.EvenArguments">
      <summary>
            The total number of arguments is even
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionSettings.Hidden">
      <summary>
            The function is hidden. It should not be used directly in the formula.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionSettings.Obsoleted">
      <summary>
            The function is obsoleted. It can be used to calculate but not available in UI.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.FunctionCategory">
      <summary>
            Represents the function category.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Custom">
      <summary>
            Custom functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Financial">
      <summary>
            Financial functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.DateTime">
      <summary>
            Date and time functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.MathTrigonometry">
      <summary>
            Math and trigonometry functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Statistical">
      <summary>
            Statistical functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.LookupReference">
      <summary>
            Lookup and reference functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Database">
      <summary>
            Database functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Text">
      <summary>
            Text functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Logical">
      <summary>
            Logical functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Information">
      <summary>
            Information functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Engineering">
      <summary>
            Engineering functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Cube">
      <summary>
            Cube functions.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Compatibility">
      <summary>
            Functions were replaced with new functions that provide improved accuracy and have names that better reflect their usage.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionCategory.Web">
      <summary>
            Web functions.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.BuiltinFunction">
      <summary>
            Represents all supported built-in functions.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[],System.Int32)">
      <summary>
            Clones the specified array to a new array.
            </summary>
      <typeparam name="T">The type of element in array.</typeparam>
      <param name="source">The array source to clone.</param>
      <param name="length">An integer value indicates the number of elements to clone.</param>
      <returns>A <see cref="!:T[]" /> value represents the cloned array.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Fill``1(``0[],``0,System.Int32,System.Int32)">
      <summary>
            Assigns the given value of type T to the elements of the specified array which are within the range of startIndex (inclusive) and the next count number of indices.
            </summary>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <param name="array">The array to be filled.</param>
      <param name="value">The new value for the elements in the specified range.</param>
      <param name="startIndex">A 32-bit integer that represents the index in the System.Array at which filling begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[],System.Int32,System.Int32)">
      <summary>
            Clones the specified array to a new array.
            </summary>
      <typeparam name="T">The type of element in array.</typeparam>
      <param name="source">The array source to clone.</param>
      <param name="index">An integer value indicates the start element index to clone.</param>
      <param name="length">An integer value indicates the number of elements to clone.</param>
      <returns>A <see cref="!:T[]" /> value represents the cloned array.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[])">
      <summary>
            Clones the specified array to a new array.
            </summary>
      <typeparam name="T">The type of element in array.</typeparam>
      <param name="source">The array source to clone.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``2(``0[])">
      <summary>
            Clones the specified array to a new array.
            </summary>
      <typeparam name="T1">The type of element in source array.</typeparam>
      <typeparam name="T2">The type of element in destination array.</typeparam>
      <param name="source">The array source to clone.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.ArrayHelper.Sort(System.Int32[],System.Double[])">
      <summary>
            Sort an <paramref name="array" /> by the comparable <paramref name="keys" /></summary>
      <param name="array">The array should be sorted.</param>
      <param name="keys">The keys that supports comparing</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.CalcHelper">
      <summary>
            Contains util functions for calculation.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
            Gets the total days in the specified month.
            </summary>
      <param name="year">An integer value indicates the year.</param>
      <param name="month">An integer value indicates the month.</param>
      <returns>An integer value represents the total days in the specified month.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.IsLeapYear(System.Int32,System.Boolean)">
      <summary>
            Determines whether the specified year is leap year.
            </summary>
      <param name="year">The year.</param>
      <param name="excelCompatible">if set to <c>true</c> the year 1900 count as leap year as Excel; otherwise, <c>false</c>.</param>
      <returns>
        <c>true</c> if the year 1900 count as leap year; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.ToDate(System.Double,System.Boolean,System.Boolean)">
      <summary>
            Converts date serial to <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">A double value indicates the date serial.</param>
      <param name="isDate1904">if set to <c>true</c>, the 1904 date system is using.</param>
      <param name="excelDateTimeCompatible">
        <c>true</c> if date time system is compatible with Excel; otherwise, <c>false</c>.</param>
      <returns>A double value represents the date serial.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.TryToDate(System.Double,System.Boolean,System.Boolean,System.DateTime@)">
      <summary>
            Converts date serial to <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">A double value indicates the date serial.</param>
      <param name="isDate1904">if set to <c>true</c>, the 1904 date system is using.</param>
      <param name="excelDateTimeCompatible">
        <c>true</c> if date time system is compatible with Excel; otherwise, <c>false</c>.</param>
      <param name="date">A <see cref="T:System.DateTime" /> value represents the corresponding date.</param>
      <returns>
        <c>true</c> if the date serial can convert to <see cref="T:System.DateTime" /> value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.ToNumber(System.TimeSpan)">
      <summary>
            Convert timeSpan to number.
            </summary>
      <param name="date">The <see cref="T:System.TimeSpan" /> value.</param>
      <returns>A double value represents the timespan serial.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.ToNumber(System.DateTime,System.Boolean,System.Boolean)">
      <summary>
            Convert DateTime to number.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> value.</param>
      <param name="isDate1904">if set to <c>true</c>, the 1904 date system is using.</param>
      <returns>A double value represents the date serial.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.IsNumericValue(System.Object)">
      <summary>
            Gets a boolean value indicating whether the specified value is numeric.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <c>true</c> if the specified value is numeric; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Sum(System.Double[])">
      <summary>
            Returns the sum of all values in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <returns>A <see cref="T:System.Double" /> value represents the sum of all values.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Sum(System.Double[],System.Double@)">
      <summary>
            Returns the sum of all values in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <param name="sum2">The sum of all square values.</param>
      <returns>A <see cref="T:System.Double" /> value represents the sum of all values.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.MinMax(System.Double[],System.Double@,System.Double@,System.Double)">
      <summary>
            Returns the mininum value and maximum value in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="lowestAcceptedValue">The lowest accepted value in the set of values.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.MinMax(System.Double[],System.Double@,System.Double@)">
      <summary>
            Returns the mininum value and maximum value in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="lowestAcceptedValue">The lowest accepted value in the set of values.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Min(System.Double[])">
      <summary>
            Returns the mininum value in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <returns>The minimum value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Abs(System.Double[])">
      <summary>
            Returns the absoluste values of a double-precision  floating-point number array.
            </summary>
      <param name="values"></param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Max(System.Double[])">
      <summary>
            Returns the maximum value in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <returns>The maximum value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Max(System.Double[],System.Int32,System.Int32)">
      <summary>
            Returns the maximum value in a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <param name="index">The start index to compare.</param>
      <param name="index">The total number of elements to compare.</param>
      <returns>The maximum value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Percentile(System.Double[],System.Double)">
      <summary>
            Returns the percentile value of the specified rank.
            </summary>
      <param name="values">The set of sorted values.</param>
      <param name="rank">The rank.</param>
      <returns></returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CalcHelper.Median(System.Double[])">
      <summary>
            Returns the median of a set of values.
            </summary>
      <param name="values">The set of values.</param>
      <returns>A <see cref="T:System.Double" /> value represents the median of a set of values.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.Extensions">
      <summary>
            Contains extension methods for calculation engine assembly.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Extensions.GetValue(GrapeCity.CalcEngine.IReadonlyPrimitiveValue,GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.CellValue@,System.Boolean)">
      <summary>
            Gets the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance to the specified <see cref="T:GrapeCity.CalcEngine.CellValue" /> struct.
            </summary>
      <param name="value">The value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</param>
      <param name="context">The evaluation context to get value from reference.</param>
      <param name="cellValue">The target <see cref="T:GrapeCity.CalcEngine.CellValue" /> struct to set data.</param>
      <param name="directValue">
        <c>true</c> if the original object value won't be converted to primitive value; otherwise, <c>false</c>.</param>
      <returns>An object represents the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Extensions.GetValue(GrapeCity.CalcEngine.IReadonlyPrimitiveValue,GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance as object.
            </summary>
      <param name="value">The value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</param>
      <param name="context">The evaluation context to get value from reference.</param>
      <param name="directValue">
        <c>true</c> if the original object value won't be converted to primitive value; otherwise, <c>false</c>.</param>
      <returns>An object represents the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.StringBuilderCache">
      <summary>
            Provide a cached reusable instance of stringbuilder per thread.
            It's an optimisation that reduces the number of instances constructed and collected.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Acquire(System.Int32)">
      <summary>
            Get a string builder to use of a particular size.  It can be called any number of times, 
            if a stringbuilder is in the cache then it will be returned and the cache emptied.
            subsequent calls will return a new stringbuilder.
            </summary>
      <param name="capacity">The capacity.</param>
      <returns>A StringBuilder instance is cached in Thread Local Storage and so there is one per thread</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
      <summary>
            ToString() the stringbuilder, Release it to the cache and return the resulting string
            </summary>
      <param name="sb">The string builder.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Release(System.Text.StringBuilder)">
      <summary>
            Place the specified builder in the cache if it is not too big.
            The stringbuilder should not be used after it has been released.
            Unbalanced Releases are perfectly acceptable.  It will merely cause the runtime to create a new stringbuilder next time Acquire is called.
            </summary>
      <param name="sb">The string builder.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.Utils">
      <summary>
            Internal use only.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Utils.Swap``1(``0@,``0@)">
      <summary>
            Swaps values of two variables.
            </summary>
      <typeparam name="T">The type of variables.</typeparam>
      <param name="a">The first variable.</param>
      <param name="b">The second variable.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IArguments">
      <summary>
            Represents a set of arguments which are passed to a function.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.EvaluationContext">
      <summary>
            Gets an <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.Count">
      <summary>
            Gets the total count of arguments.
            </summary>
      <value>An integer value indicates the total count of arguments.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IValue" /> argument at the specified index.
            </summary>
      <param name="index">An integer value indicates the index of argument.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IValue" /> instance indicates value of the specified argument.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IArguments.GetArrayValue(System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>
            Gets the value of an item in the array argument.
            </summary>
      <param name="index">An integer value indicates the index of argument.</param>
      <param name="row">An integer value indicates the row array index of item.</param>
      <param name="column">An integer value indicates the column array index of item.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance to store value of the specified item in the array argument.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IArguments.AllocSharedValue(System.Int32)">
      <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.
            </summary>
      <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to allocate.</param>
      <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
      <remarks>The calculation engine doesn't release your shared value automatically.
            If <see cref="M:GrapeCity.CalcEngine.IArguments.AllocSharedValue(System.Int32)" /> is invoked, make sure that <see cref="M:GrapeCity.CalcEngine.IArguments.DeallocSharedValue" /> is also invoked before exist from the function.</remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.IArguments.DeallocSharedValue">
      <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.SharedValueIndex">
      <summary>
            Gets the first allocated value index.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IEvaluationContext">
      <summary>
            An interface which the evaluation-enabled class must derived from.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.LanguagePackage">
      <summary>
            Gets the current language package for calculation.
            </summary>
      <value>The <see cref="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage" /> object represents the language package.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ExcelDateTimeCompatible">
      <summary>
            Processing date time is compatible with Lotus123. It assumes that 1900 is not a leap year.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.Date1904">
      <summary>
            Gets whether the date system used to convert a date to a serial value starts since 1/1/1904.
            </summary>
      <value>
        <c>true</c>, if the date system starts in 1904; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.CachingEnabled">
      <summary>
            Gets a value indicating whether calculation caching is enabled.
            </summary>
      <value>
        <c>true</c> if calculation caching is enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.GetRangeCache(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the range cache.
            </summary>
      <param name="source">The source of data.</param>
      <param name="row">if set to <c>true</c>, look up in row; otherwise, lookup in column.</param>
      <param name="column">If <see cref="!:row" /> is <c>true</c>, indicates the row index; otherwise, indicates the column index.</param>
      <param name="row2">If <see cref="!:row" /> is <c>true</c>, indicates the first column; otherwise, indicates the first row.</param>
      <param name="column2">If <see cref="!:row" /> is <c>true</c>, indicates the last column; otherwise, indicates the last row.</param>
      <returns>The <see cref="T:GrapeCity.CalcEngine.RangeCache" /> object if it's available.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextRow">
      <summary>
            Gets the row index of the cell whose formula is being evaluated.
            </summary>
      <value>An zero-based integer indicates the row index of the cell.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextColumn">
      <summary>
            Gets the column index of the cell whose formula is being evaluated.
            </summary>
      <value>An zero-based integer indicates the column index of the cell.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ArrayRowOffset">
      <summary>
            Gets the row offset of the cell inside a formula array.
            </summary>
      <value>
            An zero-based integer indicates the row offset of the cell.
            </value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ArrayColumnOffset">
      <summary>
            Gets the column offset of the cell inside a formula array.
            </summary>
      <value>
            An zero-based integer indicates the column offset of the cell.
            </value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ArrayRowCount">
      <summary>
            Gets the total number of rows inside a formula array.
            </summary>
      <value>
            An integer indicates the total number of rows inside a formula array.
            </value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ArrayColumnCount">
      <summary>
            Gets the total number of columns inside a formula array.
            </summary>
      <value>
            An integer indicates the total number of columns inside a formula array.
            </value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ReferenceSource">
      <summary>
            Gets the reference source where the formula is being evaluated.
            </summary>
      <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object represents where the formula is being evaluated.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue">
      <summary>
            Allocates a new <see cref="T:GrapeCity.CalcEngine.IValue" /> object.
            </summary>
      <returns>The new allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue(System.Int32)">
      <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.
            </summary>
      <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to allocate.</param>
      <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue">
      <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue" /> object.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue(System.Int32)">
      <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.
            </summary>
      <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to deallocate.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.GetValue(System.Int32)">
      <summary>
            Get the <see cref="T:GrapeCity.CalcEngine.IValue" /> object at the specified index.
            </summary>
      <param name="index">The zero-based integer indicates the index of <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</param>
      <returns>IValue.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.Error">
      <summary>
            Gets or sets the calculation error.
            </summary>
      <value>The calculation error value.</value>
      <remarks>The first calculation error will has highest priority. It will be kept until the calculation error is clear.</remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
      <summary>
            Enters the specified evaluating context.
            </summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.ExitContext">
      <summary>
            Exits from the current evaluating context back to the previous evaluating context.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.Evaluate(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IValue)">
      <summary>
            Evaluates the specified expression and returns the evaluated result via <paramref name="result" /> parameter.
            </summary>
      <param name="expression">The expression to evaluate.</param>
      <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to keep evaluated result.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.Evaluate(GrapeCity.CalcEngine.IDelegate,GrapeCity.CalcEngine.IValue)">
      <summary>
            Evaluates the specified expression and returns the evaluated result via <paramref name="result" /> parameter.
            </summary>
      <param name="delegate">The expression to evaluate.</param>
      <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to keep evaluated result.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.CastToInt(System.Double)">
      <summary>
            Casts the specified <see cref="T:System.Double" /> value to <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value.</param>
      <returns>The corresponding <see cref="T:System.Int32" /> value. <see cref="P:GrapeCity.CalcEngine.IEvaluationContext.Error" /> will be set to <see cref="F:GrapeCity.CalcEngine.CalcError.Number" /> if the <see cref="T:System.Double" /> value cannot be casted.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.CastToLong(System.Double)">
      <summary>
            Casts the specified <see cref="T:System.Double" /> value to <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value.</param>
      <returns>The corresponding <see cref="T:System.Int64" /> value. <see cref="P:GrapeCity.CalcEngine.IEvaluationContext.Error" /> will be set to <see cref="F:GrapeCity.CalcEngine.CalcError.Number" /> if the <see cref="T:System.Double" /> value cannot be casted.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IReferenceSource">
      <summary>
            Indicates the source of a cell reference or range reference
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.Name">
      <summary>
            Gets the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
      <value>A string value represents the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.Supports3DReference">
      <summary>
            Gets a value indicating whether this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.Date1904">
      <summary>
            Gets whether the date system used to convert a date to a serial value starts in 1904.
            </summary>
      <value>
        <c>true</c>, if the date system starts in 1904; otherwise, <c>false</c>. Default is <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.EnsureCalculated(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Make sure that all cells in the specified range are calculated.
            </summary>
      <param name="context">The evaluation context.</param>
      <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
      <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
      <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
      <param name="enableSpilledArray">if set to <c>true</c> [enable spilled array].</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.Get3DReferenceIndex">
      <summary>
            Get the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.
            </summary>
      <returns>An integer value indicates the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IValuesArray,System.Boolean)">
      <summary>
            Gets the values at the specified range of the 2-dimensions matrix.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
      <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
      <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the values at the specified range.</param>
      <param name="keepEmptyValue">Boolean value represents keeping empty values as empty or not.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue[],System.Int32)">
      <summary>
            Gets the values at the specified range of the 2-dimensions matrix.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
      <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
      <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue" /> array represents the values at the specified range.</param>
      <param name="index">The start item index to write data.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue@)">
      <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue" /> object represents the value at the specified location.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetText(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32)">
      <summary>
            Gets the text at the specified location of the 2-dimensions matrix.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.RowCount">
      <summary>
            Gets the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
      <value>An integer value represents the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.ColumnCount">
      <summary>
            Gets the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
      <value>An integer value represents the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine)">
      <summary>
            Gets the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
      <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula engine.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.StructuredItemSpecifiers,System.Int32,System.Int32)">
      <summary>
            Gets the reference expression to evaluate the specified <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.
            </summary>
      <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula engine.</param>
      <param name="structuredObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object indicates the structured object.</param>
      <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers" /> value indicates the item specifiers.</param>
      <param name="columnId">An integer value indicates the first column.</param>
      <param name="columnId2">An integer value indicates the second column.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.Expression)">
      <summary>
            Gets the reference expression to evaluate the specified <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.
            </summary>
      <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula engine.</param>
      <param name="structuredObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object indicates the structured object.</param>
      <param name="expression">The expression refers to the <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.IsUndefined">
      <summary>
            Determines whether this reference source is undefined.
            </summary>
      <returns>
        <c>true</c> if this reference source is undefined; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue">
      <summary>
            Represents an interfaces for a calculated primitive value of calculation engine.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.ValueType">
      <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.
            </summary>
      <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetNumber(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.Double" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetText(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.String" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetLogical(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.Boolean" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetError(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetDate(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetTime(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.TimeSpan" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetObject(GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
      <summary>
            Gets the <see cref="T:System.Object" /> value.
            </summary>
      <param name="context">The evaluation context to get value.</param>
      <param name="catchError">
        <c>true</c> if the evaluation context will track calculation error; otherwise, <c>false</c>.</param>
      <returns>An <see cref="T:System.Object" /> value.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IFormattedCellValue">
      <summary>
            Represents the value of a cell with a format string. 
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IFormattedCellValue.BasicValue">
      <summary>
            Gets the original value of this cell value.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IFormattedCellValue.Format">
      <summary>
            Gets the number format string that is used to format this value.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IPrimitiveValue">
      <summary>
            Represents an interfaces for a calculated primitive value of calculation engine.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Double)">
      <summary>
            Sets the <see cref="T:System.Double" /> value.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">The <see cref="T:System.Double" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Object,System.Boolean)">
      <summary>
            Sets the <see cref="T:System.Object" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.CalcError)">
      <summary>
            Sets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.
            </summary>
      <param name="value">The <see cref="T:GrapeCity.CalcEngine.CalcError" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.String)">
      <summary>
            Sets the <see cref="T:System.String" /> value.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">The <see cref="T:System.String" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Boolean)">
      <summary>
            Sets the <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.DateTime)">
      <summary>
            Sets the <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.TimeSpan)">
      <summary>
            Sets the <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.Reset">
      <summary>
            Resets this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object to empty.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.CompareTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>
            Compares this instance to a specified <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object and returns an indication of their relative values.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object idnicates the value to compare with.</param>
      <returns>A signed number indicating the relative values of this instance and value.Return Value Description Less than zero This instance is less than value. Zero This instance is equal to value. Greater than zero This instance is greater than value.-or- value is null.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IValue">
      <summary>
            Represents an interfaces for a calculated value of calculation engine.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValue.ReferenceCount">
      <summary>
            Gets the reference count.
            </summary>
      <value>An integer values represents the reference count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValue.ReferenceSourceCount">
      <summary>
            Gets the reference source count.
            </summary>
      <value>An integer values represents the reference source count.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets the reference source.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> objects indicates the reference source.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource2(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets the end reference source.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> objects indicates the end reference source.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
      <summary>
            Gets the reference source at the specified position.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="sourceIndex">An integer value indicates the position of the reference source.</param>
      <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> objects indicates the reference source.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReference(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
      <summary>
            Gets the reference at the specified position.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="index">An integer value indicates the position in the array.</param>
      <returns>A <see cref="!:RangeReference." /> value represents the reference at the specified position.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetAccessibleReference(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
      <summary>
            Gets the cell range reference at the specified position.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="index">An integer value indicates the position in the array. If the <see cref="P:GrapeCity.CalcEngine.IValue.ValueType" /> is <see cref="F:GrapeCity.CalcEngine.ValueType.Reference3D" />, it indicates the position of reference source.</param>
      <returns>A <see cref="!:RangeReference." /> value represents the reference at the specified position.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetRowCount(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets the row count of the evaluated range reference.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <returns>An integer value represents the row count of the evaluated range reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetColumnCount(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Gets the column count of the evaluated range reference.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <returns>An integer value represents the column count of the evaluated range reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.CopyReferenceTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],System.Int32)">
      <summary>
            Copies all references to an array at the specified position.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="array">The array to copy to.</param>
      <param name="index">An integer value indicates the position in the array.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified cell reference.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value indicates the range reference.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference array.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified 3D-reference.
            </summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRef">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
      <param name="startRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the start reference source.</param>
      <param name="endRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the end reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetValue(GrapeCity.CalcEngine.IValuesArray)">
      <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
      <param name="valuesArray">An <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the new value.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetValuesArray">
      <summary>
            Gets the values array value.
            </summary>
      <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.CreateValuesArray(System.Int32,System.Int32)">
      <summary>
            Creates a new values array.
            </summary>
      <param name="rowCount">An integer value indicates the row count of values array.</param>
      <param name="columnCount">An integer value indicates the column count of values array.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetDelegate">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IDelegate" /> object.
            </summary>
      <returns>The <see cref="T:GrapeCity.CalcEngine.IDelegate" /> object returned by LAMBDA function.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValue.ValueType">
      <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IValue" /> instance.
            </summary>
      <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IValue" /> instance.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetPrimitiveValue(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>
            Get primitive value from this <see cref="T:GrapeCity.CalcEngine.IValue" /> object.
            </summary>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance referred by this <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
      <remarks>After this function is invoked, there is no guarranty that this object keeps unchanged.</remarks>
    </member>
    <member name="T:GrapeCity.CalcEngine.PrimitiveValueType">
      <summary>
            Represents the type of evaluated primitive value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Empty">
      <summary>
            Indicates there is no value returned.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Error">
      <summary>
            Indicates the value type is calculation error.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Logical">
      <summary>
            Indicates the value type is boolean.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Text">
      <summary>
            Indicates the value type is string.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Number">
      <summary>
            Indicates the value type is numeric.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.DateTime">
      <summary>
            Indicates the value type is DateTime which is introduced from Excel 2010.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.TimeSpan">
      <summary>
            Indicates the value type is TimeSpan.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Image">
      <summary>
            Indicates the cell inline image.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Object">
      <summary>
            Indicates the value type if object.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.ValueType">
      <summary>
            Represents the type of evaluated value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Empty">
      <summary>
            Indicates there is no value returned.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Error">
      <summary>
            Indicates the value type is calculation error.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Logical">
      <summary>
            Indicates the value type is boolean.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Text">
      <summary>
            Indicates the value type is string.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Number">
      <summary>
            Indicates the value type is numeric.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.DateTime">
      <summary>
            Indicates the value type is DateTime.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.TimeSpan">
      <summary>
            Indicates the value type is TimeSpan.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Integer">
      <summary>
            Indicates the value type is integer number.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Image">
      <summary>
            Indicates the cell inline image.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Delegate">
      <summary>
            Indicates the value type is a delegate.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Object">
      <summary>
            Indicates the value type is general object.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.ValuesArray">
      <summary>
            Indicates the value type is array.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.ArrayReference">
      <summary>
            Indicates the evaluated result of anchor operator (#)
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Reference">
      <summary>
            Indicates the value type is reference (declared in the formula or be calculated)
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.AdjustableReference">
      <summary>
            Indicates the value type is reference which is declared in the formula
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.MultiReference">
      <summary>
            Indicates the value type is multi-reference.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Reference3D">
      <summary>
            Indicates the value type is 3D-Reference.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage">
      <summary>
            Represents a language package for formulas.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ICalcEngineLanguagePackage.GetArgument(GrapeCity.CalcEngine.Function,System.String)">
      <summary>
            Get the English argument value of the specified localized argument.
            </summary>
      <param name="function">The function that is processing</param>
      <param name="localizedParam">The localized parameter.</param>
      <returns>The English parameter value of the specified localized parameter.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ICalcEngineLanguagePackage.GetName(GrapeCity.CalcEngine.Function)">
      <summary>
            Gets the localized name of the function.
            </summary>
      <param name="function">A <see cref="T:GrapeCity.CalcEngine.BuiltinFunction" /> value indicates the built-in function.</param>
      <returns>A string value represents the localized name of the function.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.ExpressionCount">
      <summary>
            Gets the total count of child expression(s).
            </summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.LeftExpression">
      <summary>
            Gets or sets the left expression.
            </summary>
      <value>The left expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.RightExpression">
      <summary>
            Gets or sets the right expression.
            </summary>
      <value>The right expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.Symbol">
      <summary>
            Gets the symbol of the operator.
            </summary>
      <value>A string value indicates the symbol of the operator.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>
            Replaces the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetExpression(System.Int32)">
      <summary>
            Gets the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.BinaryOperatorExpression" /> to the formula text.
            </summary>
      <param name="engine">The parser to unparse.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.ExpressionCount">
      <summary>
            Gets the total count of child expression(s).
            </summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression">
      <summary>
            Gets or sets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Symbol">
      <summary>
            Gets the symbol of the operator.
            </summary>
      <value>A string value indicates the symbol of the operator.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>
            Replaces the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetExpression(System.Int32)">
      <summary>
            Gets the expression at the specified location.
            </summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
      <param name="engine">The parser to unparse.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>
            Indicates whether the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to another <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" />.
            </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to the other <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.FormulaEngine">
      <summary>
            Represents the formula engine. 
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Clone(GrapeCity.CalcEngine.Expression)">
      <summary>
            Clones the specified expression.
            </summary>
      <param name="expression">The expression to clone.</param>
      <returns>The new clone expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.SetLanguagePackage(GrapeCity.CalcEngine.ICalcEngineLanguagePackage)">
      <summary>
            Sets the language package.
            </summary>
      <param name="languagePackage">The new language package.</param>
      <returns>The old language package.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedRowCount">
      <summary>
            Gets or sets the translated row count of current reference source when we unparse the expression to formula.
            </summary>
      <value>An integer value represents the context translated row count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedColumnCount">
      <summary>
            Gets or sets the translated column count of current reference source when we unparse the expression to formula.
            </summary>
      <value>An integer value represents the context translated column count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.Culture">
      <summary>
            Gets the current <see cref="T:System.Globalization.CultureInfo" /> object for parsing and unparsing process.
            </summary>
      <value>A <see cref="T:System.Globalization.CultureInfo" /> object represent the current culture.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsA1Reference">
      <summary>
            Gets a value indicating whether the current parsing mode is A1 reference style.
            </summary>
      <value>
        <c>true</c> if the current parsing mode is A1 reference style; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StrictR1C1Boundary">
      <summary>
            All unbound ranges will be parsed as #REF! when we parse in R1C1 reference style.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnstrictR1C1Boundary">
      <summary>
            Stops verifying whether the R1C1 reference is unbound or not.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
      <summary>
            Enters the specified parsing context.
            </summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Enters the specified parsing context.
            </summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
      <param name="isA1Reference">if set to <c>true</c> the formula is using A1 reference format. Otherwise, it uses R1C1 reference format.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.ExitContext">
      <summary>
            Exits the latest parsing context and restore the previous parsing context.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Parse(System.String,GrapeCity.CalcEngine.Expression@,System.Boolean)">
      <summary>
            Parses the specified formula text to expression.
            </summary>
      <param name="formulaText">A string indicates the formula text.</param>
      <param name="parsedExpression">The parsed expression.</param>
      <param name="detectFormulaSymbol"></param>
      <returns>
        <c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Highlight(System.String,System.Boolean)">
      <summary>
            Parses the specified formula text to expression.
            </summary>
      <param name="formulaText">A string indicates the formula text.</param>
      <param name="detectFormulaSymbol">Determines whether the "=" character should be detected and skipped.</param>
      <returns>The <see cref="T:GrapeCity.CalcEngine.SyntaxHighlight" /> value represents the highlight data.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>
            Unparses the specified expression to formula text.
            </summary>
      <param name="contextSource">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
      <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the expression.</param>
      <returns>The formula text unparsed from the input expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.Expression)">
      <summary>
            Unparses the specified expression to formula text.
            </summary>
      <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the expression.</param>
      <returns>The formula text unparsed from the input expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.ISymbolResolver)">
      <summary>
            Adds a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...
            </summary>
      <param name="resolver">The custom symbol resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.ISymbolResolver)">
      <summary>
            Removes a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...
            </summary>
      <param name="resolver">The custom symbol resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IFunctionResolver)">
      <summary>
            Adds the custom function resolver which resolve custom function(s).
            </summary>
      <param name="resolver">The custom function resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IFunctionResolver)">
      <summary>
            Removes the custom function resolver which resolve custom function(s).
            </summary>
      <param name="resolver">The custom function resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IOperatorResolver)">
      <summary>
            Adds the custom operator resolver which allow overriding standard operators by custom operators.
            </summary>
      <param name="resolver">The custom operator resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IOperatorResolver)">
      <summary>
            Removes the custom operator resolver which allow overriding standard operators by custom operators.
            </summary>
      <param name="resolver">The custom operator resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.GetFunction(System.String)">
      <summary>
            Gets the function from the specified name.
            </summary>
      <param name="name">The string value indicates function name.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function" /> object represents the function.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1Reference(System.String,GrapeCity.CalcEngine.RangeReference@)">
      <summary>
            Converts the string representation of a range reference in R1C1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference" /> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="ref">A string containing a range reference to convert.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the parsed range reference.</param>
      <returns>
        <c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the range reference in A1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseReferenceSource(GrapeCity.CalcEngine.IReferenceSource,System.Text.StringBuilder)">
      <summary>
            Unparses the specified reference source
            </summary>
      <param name="source">The reference source to unparse.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseReferenceSource(GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the specified reference source
            </summary>
      <param name="source">The reference source to unparse.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference)">
      <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the range reference in R1C1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in R1C1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder)">
      <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in R1C1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseError(GrapeCity.CalcEngine.CalcError)">
      <summary>
            Unparses the specified <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.
            </summary>
      <param name="error">A <see cref="T:GrapeCity.CalcEngine.CalcError" /> value indicates the calculation error.</param>
      <returns>A string value represents the calculation error text.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseA1Reference(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
      <summary>
            Converts the string representation of a range reference in A1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference" /> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="ref">A string containing a range reference to convert.</param>
      <param name="baseRow">An integer value indicates the context row.</param>
      <param name="baseColumn">An integer value indicates the context column.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the parsed range reference.</param>
      <returns>
        <c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference)">
      <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the cell reference in A1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference)">
      <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the cell reference in R1C1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the cell reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Unparses the range reference in A1 reference style.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the cell reference in R1C1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartImporting">
      <summary>
            Mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> as importing state.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopImporting">
      <summary>
            Un-mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> from importing state.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsImporting">
      <summary>
            Gets a boolean value indicating whether the context is in importing process.
            </summary>
      <value>
        <c>true</c> if the context is in importing process; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsExporting">
      <summary>
            Gets a boolean value indicating whether the context is in exporting process.
            </summary>
      <value>
        <c>true</c> if the context is in exporting process; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartExporting">
      <summary>
            Mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> as exporting state.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopExportting">
      <summary>
            Un-mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> from exporting state.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AppendTableColumn(System.String,System.Text.StringBuilder)">
      <summary>
            Appends the column name of the structured reference.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.ColumnSeparator">
      <summary>
            Get column separator character from current culture
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IFunctionResolver">
      <summary>
            Represents an interface that resolve functions.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IFunctionResolver.Resolve(System.String)">
      <summary>
            Resolves a function from the specified name.
            </summary>
      <param name="name">A string value indicates the function name.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function" /> object represents the parsed function.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IFunctionResolver.Find(System.String)">
      <summary>
            Finds all functions which have name started with the <paramref name="prefix" />.
            </summary>
      <param name="prefix">The prefix text of the function name.</param>
      <returns>All functions which have name started with the <paramref name="prefix" />.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.ISymbolResolver">
      <summary>
            Represents an interface that resolve symbols.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
      <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <param name="formula">A character array indicates the formula text.</param>
      <param name="index">An integer value indicates the start index of the symbol.</param>
      <param name="length">An integer value indicates the length of the symbol.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.String)">
      <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
      <param name="symbol">A string value indicates the symbol name.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.GetUndefinedExpression(GrapeCity.CalcEngine.FormulaEngine,System.String)">
      <summary>
            Resolves an undefined expression from the sepecified symbol.
            </summary>
      <param name="symbol">A string value indicates the symbol.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.GetUndefinedExpression(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32)">
      <summary>
            Resolves an undefined expression from the sepecified symbol.
            </summary>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <param name="symbol">A character array indicates the formula text.</param>
      <param name="length">An integer value indicates the length of the symbol.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.String,System.String,System.String)">
      <summary>
            Resolves the reference source from the specified path, book name and reference source name.
            </summary>
      <param name="path">A string value indicates the book path.</param>
      <param name="bookName">A string value indicates the book name.</param>
      <param name="refSourceName">A string value indicates the reference source.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.String)">
      <summary>
            Resolves the reference source from the specified book index and reference source name.
            </summary>
      <param name="bookIndex">An integer value indicates the book index.</param>
      <param name="refSourceName">A string value indicates the reference source.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
      <summary>
            Resolves the structured object from the specified object name.
            </summary>
      <param name="formula">A character array indicates the formula text.</param>
      <param name="index">An integer value indicates the start index of the object name.</param>
      <param name="length">An integer value indicates the length of the object name.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.Int32)">
      <summary>
            Resolves the structured object from the specified cell location.
            </summary>
      <param name="row">An integer value indicates the context row.</param>
      <param name="column">An integer value indicates the context column.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IOperatorResolver">
      <summary>
            Represents an interface which allows to override the behavior of operators.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IOperatorResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.OperatorType,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
      <summary>
            Resolves the parsing operator.
            </summary>
      <param name="opType">An <see cref="T:GrapeCity.CalcEngine.OperatorType" /> value indicates the operator.</param>
      <param name="leftArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object indicates the left argument expression.</param>
      <param name="rightArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object indicates the right argument expression.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns></returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.OperatorType">
      <summary>
            Enumerates the list of operators.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Percentage">
      <summary>
            Represents the percentage operator (%).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Negation">
      <summary>
            Represents the negation operator (-).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Plus">
      <summary>
            Represents the plus operator (+).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.ReferenceSource">
      <summary>
            Represents the reference source operator (!).
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.DoesNotEquals" -->
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.LessThanOrEquals" -->
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.LessThan" -->
    <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThanOrEquals">
      <summary>
            Represents the greater-than-or-equals operator (&gt;=).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThan">
      <summary>
            Represents the greater-than operator (&gt;).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Equals">
      <summary>
            Represents the equals operator (=).
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.Concatenation" -->
    <member name="F:GrapeCity.CalcEngine.OperatorType.Subtraction">
      <summary>
            Represents the subtraction operator (-).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Addition">
      <summary>
            Represents the addition operator (+).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Division">
      <summary>
            Represents the division operator (/).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Multiplication">
      <summary>
            Represents the multiplication operator (*).
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Exponentiation">
      <summary>
            Represents the exponentiation operator (^).
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.Concat" -->
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.LessThan" -->
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.LessThanOrEquals" -->
    <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.DoesNotEquals" -->
    <member name="T:GrapeCity.CalcEngine.IRichValue">
      <summary>
            Represents a rich cell value.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IRichValue.ShowDetailsIcon">
      <summary>
            Gets or sets a boolean indicating whether to show the icon for <see cref="!:RichValue&lt;T&gt;" /> object.
            </summary>
      <remarks>
        <para>If the value is <c>true</c>, the icon of <see cref="!:RichValue&lt;T&gt;" /> object displays if it's available; otherwise, default icon displays.</para>
        <para>If the value is <c>false</c>, no icon displays.</para>
        <para>If the value is <c>null</c>, the icon of <see cref="!:RichValue&lt;T&gt;" /> object will display if it's available; otherwise, no icon displays.</para>
      </remarks>
    </member>
    <member name="P:GrapeCity.CalcEngine.IRichValue.FieldCount">
      <summary>
            Gets the total numbers of fields.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IRichValue.GetFieldName(System.Int32)">
      <summary>
            Gets the name of field.
            </summary>
      <param name="index">An integer value indicates the field index.</param>
      <returns>A string value represents the name of field.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object.
            </summary>
      <param name="index">An integer value indicates the field index.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object indicates the result.</param>
      <returns>A boolean value indicates whether the field value is returned successful.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.Int32,GrapeCity.CalcEngine.CellValue@)">
      <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object.
            </summary>
      <param name="index">An integer value indicates the field index.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue" /> object indicates the result.</param>
      <returns>A boolean value indicates whether the field value is returned successful.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.String,System.Object@)">
      <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object.
            </summary>
      <param name="name">The field name.</param>
      <param name="value">The field value.</param>
      <returns>A boolean value indicates whether the field value is returned successful.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IRichValue.IsSameField(GrapeCity.CalcEngine.IRichValue)">
      <summary>
            Gets a boolean value indicating whether this object has same fields as the specified object.
            </summary>
      <param name="value">The <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object to compare.</param>
      <returns>
        <c>true</c> if this object has same fields as the specified object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IRichValueArraySupport">
      <summary>
            Represents an interface that support spilling <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IRichValueArraySupport.EvaluatedValueType">
      <summary>
            Gets or sets the current evaluated value type of the <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object.
            </summary>
      <remarks>
            If the <see cref="T:GrapeCity.CalcEngine.IRichValue" /> object has <see cref="F:GrapeCity.CalcEngine.RichValueValueType.Array" /> type, it's assumed as mutable.
            </remarks>
    </member>
    <member name="T:GrapeCity.CalcEngine.RichValueValueType">
      <summary>
            Represents the evaluated value type of an <see cref="T:GrapeCity.CalcEngine.IRichValueArraySupport" /> object.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.RichValueValueType.Rich">
      <summary>
            An <see cref="T:GrapeCity.CalcEngine.IRichValue" /> value.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.RichValueValueType.Array">
      <summary>
            An array of values that will be spilled over cells.
            </summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.RichValueValueType.Primitive">
      <summary>
            An primitive value.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.CellValueDataTypeAttribute">
      <summary>
            Represents the attribute that allows user to indicates the processing cell value data type.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellValueDataTypeAttribute.#ctor(GrapeCity.CalcEngine.PrimitiveValueType)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellValueDataTypeAttribute" /> class.
            </summary>
      <param name="type">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValueType" /> value indicates the processing cell value data type.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SyntaxHighlight">
      <summary>
            Represents the syntax highlight information of a formula.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Formula">
      <summary>
            Gets the coressponding formula of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlight" /> value.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.SyntaxHighlight.GetFunctionEntry(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Gets the syntax highlight entry for function at the specified character index.
            </summary>
      <param name="index">The index of the character for which to retrieve the highlight entry.</param>
      <param name="row">An integer value indicates the current row.</param>
      <param name="column">An integer value indicates the current column.</param>
      <param name="intellisense">
        <c>true</c> if the entry is used for intellisense (entry ancestor will be returned if caret is in function name);
            otherwise, the exact entry at the caret will return.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> value represents the syntax highlight entry for function.</returns>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Count">
      <summary>
            Gets the total number of highlight entries.
            </summary>
      <returns>An integer value represents the total number of highlight entries.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.SyntaxHighlight.Accept(GrapeCity.CalcEngine.ISyntaxHighlighter,System.Int32,System.Int32)">
      <summary>
            Accepts the specified syntax highlighter to process entries.
            </summary>
      <param name="syntaxHighlighter">The syntax highlighter.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SyntaxHighlightEntry">
      <summary>
            Represents the syntax highlight information at the specified position of formula.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.PrefixWhitespace">
      <summary>
            Gets the total number of whitespace characters before the entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.SuffixWhitespace">
      <summary>
            Gets the total number of whitespace characters after the entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsSpilledCell">
      <summary>
            Gets a value indicating whether the highlight entry is spill cell.
            </summary>
      <value>
        <c>true</c> if the highligh entry is spill cell; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.FieldName">
      <summary>
            Gets the field name value when the highlight entry is field name expression.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsFieldName">
      <summary>
            Gets a value indicating whether the highlight entry is  field name.
            </summary>
      <value>
        <c>true</c> if the highlight entry is filed name element; otherwise <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.EncodeType">
      <summary>
            Gets a value indicating whether the highlight entry is  encode with "[]" / "[" or no require encode.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharIndex">
      <summary>
            Gets the start character index of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> in the formula.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsDefinedName">
      <summary>
            Gets a value indicating whether the highlight entry is a define name.
            </summary>
      <value>
        <c>true</c> if the highlight entry is a define name element; otherwise <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsParenthesis">
      <summary>
            Gets a value indicating whether the highlight entry is a parenthesis.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsFucntionDelegate">
      <summary>
            Gets a value indicating whether the highlight entry is a function delegate.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsEvaluatedName">
      <summary>
            Gets a value indicating whether the highlight entry is an evaluated name.
            </summary>
      <value>
        <c>true</c> if the highlight entry is an evaluated name; otherwise <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsParameter">
      <summary>
            Gets a value indicating whether the highlight entry is a parameter.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsStructureReference">
      <summary>
            Gets a value indicating whether the highlight entry is a structure reference .
            </summary>
      <value>
        <c>true</c> if the highlight entry is a structure reference; otherwise <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsUncompleted">
      <summary>
            Gets a value indicating whether the highlight entry is not completed yet.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharLength">
      <summary>
            Gets the character length of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> in the formula.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function">
      <summary>
            Gets the corresponding <see cref="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function" /> object of this highlight entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Count">
      <summary>
            Gets the total number of arguments.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> value at the specified argument index.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.ArgbColor">
      <summary>
            Gets the ARGB color value of this highlight entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsColorized">
      <summary>
            Gets a boolean value indicates whether the syntax highlight entry should be colorized.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Reference">
      <summary>
            Gets the coressponding reference of this entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.FirstSource">
      <summary>
            Gets the first coressponding reference of this entry.
            </summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.LastSource">
      <summary>
            Gets the last coressponding reference of this entry.
            </summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.ISyntaxHighlighter">
      <summary>
            Represents the syntax highlighter that perform highlighting.
            </summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISyntaxHighlighter.Visit(GrapeCity.CalcEngine.SyntaxHighlight,GrapeCity.CalcEngine.SyntaxHighlightEntry@)">
      <summary>
            Visits the specified syntax highlight entry.
            </summary>
      <param name="syntaxHighlight">The syntax highlight.</param>
      <param name="syntaxHighlightEntry">The syntax highlight entry to process.</param>
    </member>
    <member name="M:GrapeCity.CoreRT.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="s">The string to check.</param>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IndexOfWhiteSpace(System.String,System.Int32,System.Int32)">
      <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="s">The string to check.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IndexOfWhiteSpace(System.Char*,System.Int32)">
      <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="s">The string to check.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IndexOf(System.Char*,System.Char,System.Int32,System.Int32)">
      <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="pChars">The string to check.</param>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
            Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.
            The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number
            of character positions.
            </summary>
      <param name="s">The string to check.</param>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IsWhiteSpace(System.Char)">
      <summary>
            Determines whether the specified character is white-space character.
            </summary>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if the specified character is white-space character; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.TrimBreakableSpace(System.String)">
      <summary>
            //Remove all leading and trailing occurrences of a character from the current string.
            </summary>
      <param name="s">The string to trim.</param>
      <returns>A string value represents the trimmed string.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IsAsciiLetterOrDigit(System.Char)">
      <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter or a decimal digit.
            </summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="c" /> isn't a letter or a decimal digit; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.IsAsciiLetter(System.String)">
      <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter.
            </summary>
      <param name="text">The Unicode character to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="text" /> isn't a letter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.GetAnsiCompatibleFromJapanese(System.String)">
      <summary>
            Gets the ANSI compatible characters from japanese characters.
            </summary>
      <param name="text">A string value indicates the origin text.</param>
      <returns>A string value represents the ANSI compatible characters.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.MemoryCopy(System.Byte*,System.Byte*,System.UInt32)">
      <summary>
            Memmoves the specified dest.
            </summary>
      <param name="src">The target address.</param>
      <param name="dest">The address of the bytes to copy.</param>
      <param name="bytesToCopy">The number of bytes to copy.</param>
    </member>
    <member name="M:GrapeCity.CoreRT.IsInfinityOrNaN(System.Double)">
      <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity or not a number.
            </summary>
      <param name="d">The d.</param>
      <returns>
        <c>true</c> if <paramref name="d" /> evaluates to infinity or <see cref="F:System.Double.NaN" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.Replace(System.String,System.Char,System.Char)">
      <summary>
            Replaces all occurrences of a specified Unicode character in the specified string with another specified Unicode character.
            </summary>
      <param name="text">The string value to replace.</param>
      <param name="oldChar">The Unicode character to be replaced.</param>
      <param name="newChar">The Unicode character to replace all occurrences of oldChar.</param>
      <remarks>This function will changed the <paramref name="text" /> directly.</remarks>
    </member>
    <member name="M:GrapeCity.CoreRT.EqualsOrdinal(System.String,System.String)">
      <summary>
            Determines whether two specified String objects have the same value.
            </summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>
        <c>true</c> if the value of a is the same as the value of b; otherwise, <c>false</c>. If both a and b are null, the method returns <c>true</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.StartsWithOrdinal(System.String,System.String,System.Int32)">
      <summary>
            Determines whether the beginning of the specified string matches another specified string. Strings are compared as ordinal.
            </summary>
      <param name="str">The string to check.</param>
      <param name="startsWith">The start character index to compare.</param>
      <returns>
        <c>true</c> if <paramref name="str" /> starts with <paramref name="startsWith" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.CompareOrdinal(System.String,System.String)">
      <summary>
            Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.
            </summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
      <remarks>
            Less than zero    :   strA is less than strB.
            Zero              :   strA and strB are equal.
            Greater than zero :   strA is greater than strB.
            </remarks>
    </member>
    <member name="M:GrapeCity.CoreRT.CompareOrdinalIgnoreCase(System.String,System.String)">
      <summary>
            Compares two specified <see cref="T:System.String" /> objects using ordinal (binary) sort rules and ignoring the case of strings being compared.
            </summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
      <remarks>
            Less than zero    :   strA is less than strB.
            Zero              :   strA and strB are equal.
            Greater than zero :   strA is greater than strB.
            
            When you compare a string constant, pass upppercase string for better performance.
            </remarks>
    </member>
    <member name="M:GrapeCity.CoreRT.EqualsOrdinalIgnoreCase(System.String,System.String)">
      <summary>
            Determines whether two specified String objects have the same value using ordinal (binary) sort rules and ignoring the case of strings being compared.
            </summary>
      <param name="stringA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>
        <c>true</c> if the value of a is the same as the value of b; otherwise, <c>false</c>. If both a and b are null, the method returns <c>true</c>.</returns>
      <remarks>When you compare a string constant, pass upppercase string for better performance.</remarks>
    </member>
    <member name="M:GrapeCity.CoreRT.EqualsOrdinalIgnoreCase(System.Char*,System.Int32,System.String)">
      <summary>
            Determines whether two specified String objects have the same value using ordinal (binary) sort rules and ignoring the case of strings being compared.
            </summary>
      <param name="ap">The first string to compare.</param>
      <param name="length"></param>
      <param name="strB">The second string to compare.</param>
      <returns>
        <c>true</c> if the value of a is the same as the value of b; otherwise, <c>false</c>. If both a and b are null, the method returns <c>true</c>.</returns>
      <remarks>When you compare a string constant, pass upppercase string for better performance.</remarks>
    </member>
    <member name="M:GrapeCity.CoreRT.GetByteCount(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the total byte count from the specified sub-string.
            </summary>
      <param name="text">The text.</param>
      <param name="charIndex">Start index of the character to calculate.</param>
      <param name="length">The length of the calculated sub-string.</param>
      <param name="codepage">The codepage used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</param>
      <returns>The total byte count of the specified sub-string.</returns>
    </member>
    <member name="M:GrapeCity.CoreRT.GetCharacterLengthFromBytes(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the character length from bytes.
            </summary>
      <param name="text">The text.</param>
      <param name="charIndex">Start index of the character to calculate. Negative value indicates that we will calculate from right to left.</param>
      <param name="bytes">The bytes.</param>
      <param name="codepage">The codepage used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</param>
      <returns>Negative value if the start index is in the middle of the character.</returns>
    </member>
  </members>
</doc>